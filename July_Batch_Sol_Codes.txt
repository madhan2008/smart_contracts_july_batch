

https://clickhouse.com/docs/en/sql-reference/data-types/int-uint

https://remix.ethereum.org/#lang=en&optimize=false&runs=200&evmVersion=null&version=soljson-v0.8.26+commit.8a97fa7a.js

Ether Conversions:

Example Conversions:

1 Ether = 10^18 Wei

1 ether = 1_000_000_000_000_000_000 wei

0.5 ether = 500_000_000_000_000_000 wei

2.75 ether = 2_750_000_000_000_000_000 wei

1 gwei = 1_000_000_000 wei

Example of 2 Decimals: 1.23

Store 1.23 as 123 (an integer). To display, divide by 100 = 1.23

75 / 100 = 0.75

1099 / 100 = 10.99

Integers:

pragma solidity ^0.6.10;

Contract Contact {

  uint8 age;
  
  function setage(uint8 _age) public {

  age = _age;

 }
}

----------------------------------------------------------------------------------------------------------------

//SPDX-License-Identifier: MIT
pragma solidity ^0.6.10;

contract variables{

    // define variables 
    //unsigned integer --> +ve values
    //Signed Integer --> +ve and - ve values
    //uint256 --> 0.1KB
    //uint8 --> 0.001KB
    uint8 age;
    uint height;
    uint64 amount;
    int64 balance;

    //string datatype  --> bytes and string (Text)
    bytes name = "Alice";
    string country;

    //bool datatype --> true or false 
    bool flag;
}
---------------------------------------------------------------------------------------------

ENUM Concept:

//SPDX-License-Identifier: MIT
pragma solidity ^0.6.10;

contract enumSample{
    enum PizzaSize {Small, Medium, Large}
    PizzaSize choice;
    PizzaSize constant defaultChoice = PizzaSize.Small;
    
    function setlarge() public {
        choice = PizzaSize.Large;
        
    }

    function setMedium() public {
        choice = PizzaSize.Medium;
        
    }
    function getChoice() public view returns (PizzaSize) {
        return choice;
        
    }

     function getDefaultChoice() public pure returns (PizzaSize) {
        return defaultChoice;
        
    }
}

-------------------------------------------------------------------------------------------

Struct & Mapping

//SPDX-License-Identifier: MIT
pragma solidity ^0.6.10;

contract structSample{

  struct learner {string name; uint8 age; }

  mapping (uint8 => learner) public learners;
  //1 => (Alice, 35)
  //2 => (Tom, 21)

  function setLearnerDetails (uint8 _key,string memory _name,uint8 _age) public{
    //learners[1].name="Alice"
    //learners[1].age=35
    learners[_key].name = _name;
    learners[_key].age = _age;
     }

  function getLearnerDetails (uint8 _key) public view returns(string memory,uint8){
    return (learners[_key].name,learners[_key].age);

}
}

--------------------------------------------------------------------------------------------------------

